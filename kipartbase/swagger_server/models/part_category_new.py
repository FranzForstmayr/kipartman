# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.part_category_data import PartCategoryData
from swagger_server.models.part_category_ref import PartCategoryRef
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class PartCategoryNew(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, parent=None):
        """
        PartCategoryNew - a model defined in Swagger

        :param name: The name of this PartCategoryNew.
        :type name: str
        :param parent: The parent of this PartCategoryNew.
        :type parent: PartCategoryRef
        """
        self.swagger_types = {
            'name': str,
            'parent': PartCategoryRef
        }

        self.attribute_map = {
            'name': 'name',
            'parent': 'parent'
        }

        self._name = name
        self._parent = parent

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PartCategoryNew of this PartCategoryNew.
        :rtype: PartCategoryNew
        """
        return deserialize_model(dikt, cls)

    @property
    def name(self):
        """
        Gets the name of this PartCategoryNew.

        :return: The name of this PartCategoryNew.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PartCategoryNew.

        :param name: The name of this PartCategoryNew.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parent(self):
        """
        Gets the parent of this PartCategoryNew.

        :return: The parent of this PartCategoryNew.
        :rtype: PartCategoryRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this PartCategoryNew.

        :param parent: The parent of this PartCategoryNew.
        :type parent: PartCategoryRef
        """

        self._parent = parent

