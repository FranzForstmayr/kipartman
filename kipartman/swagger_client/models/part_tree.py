# coding: utf-8

"""
    Kipartman

    Kipartman api specifications

    OpenAPI spec version: 1.0.0
    Contact: --
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PartTree(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, description=None, parameters=None, comment=None, octopart=None, updated=None, id=None, category=None, childs=None, has_childs=None):
        """
        PartTree - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'description': 'str',
            'parameters': 'list[PartParameter]',
            'comment': 'str',
            'octopart': 'str',
            'updated': 'datetime',
            'id': 'int',
            'category': 'PartCategoryTree',
            'childs': 'list[PartTree]',
            'has_childs': 'bool'
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'parameters': 'parameters',
            'comment': 'comment',
            'octopart': 'octopart',
            'updated': 'updated',
            'id': 'id',
            'category': 'category',
            'childs': 'childs',
            'has_childs': 'has_childs'
        }

        self._name = name
        self._description = description
        self._parameters = parameters
        self._comment = comment
        self._octopart = octopart
        self._updated = updated
        self._id = id
        self._category = category
        self._childs = childs
        self._has_childs = has_childs

    @property
    def name(self):
        """
        Gets the name of this PartTree.

        :return: The name of this PartTree.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PartTree.

        :param name: The name of this PartTree.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this PartTree.

        :return: The description of this PartTree.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this PartTree.

        :param description: The description of this PartTree.
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def parameters(self):
        """
        Gets the parameters of this PartTree.

        :return: The parameters of this PartTree.
        :rtype: list[PartParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this PartTree.

        :param parameters: The parameters of this PartTree.
        :type: list[PartParameter]
        """

        self._parameters = parameters

    @property
    def comment(self):
        """
        Gets the comment of this PartTree.

        :return: The comment of this PartTree.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """
        Sets the comment of this PartTree.

        :param comment: The comment of this PartTree.
        :type: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")

        self._comment = comment

    @property
    def octopart(self):
        """
        Gets the octopart of this PartTree.

        :return: The octopart of this PartTree.
        :rtype: str
        """
        return self._octopart

    @octopart.setter
    def octopart(self, octopart):
        """
        Sets the octopart of this PartTree.

        :param octopart: The octopart of this PartTree.
        :type: str
        """

        self._octopart = octopart

    @property
    def updated(self):
        """
        Gets the updated of this PartTree.

        :return: The updated of this PartTree.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this PartTree.

        :param updated: The updated of this PartTree.
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """
        Gets the id of this PartTree.

        :return: The id of this PartTree.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PartTree.

        :param id: The id of this PartTree.
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def category(self):
        """
        Gets the category of this PartTree.

        :return: The category of this PartTree.
        :rtype: PartCategoryTree
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this PartTree.

        :param category: The category of this PartTree.
        :type: PartCategoryTree
        """

        self._category = category

    @property
    def childs(self):
        """
        Gets the childs of this PartTree.

        :return: The childs of this PartTree.
        :rtype: list[PartTree]
        """
        return self._childs

    @childs.setter
    def childs(self, childs):
        """
        Sets the childs of this PartTree.

        :param childs: The childs of this PartTree.
        :type: list[PartTree]
        """

        self._childs = childs

    @property
    def has_childs(self):
        """
        Gets the has_childs of this PartTree.

        :return: The has_childs of this PartTree.
        :rtype: bool
        """
        return self._has_childs

    @has_childs.setter
    def has_childs(self, has_childs):
        """
        Sets the has_childs of this PartTree.

        :param has_childs: The has_childs of this PartTree.
        :type: bool
        """

        self._has_childs = has_childs

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PartTree):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
